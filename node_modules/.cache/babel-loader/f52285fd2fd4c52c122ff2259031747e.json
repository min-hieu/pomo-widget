{"ast":null,"code":"var _jsxFileName = \"/Users/charlie/Desktop/pomo-widget/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { MdRefresh, MdWork, MdSettings, MdClose } from 'react-icons/md';\nimport { AiTwotoneRest } from 'react-icons/ai';\nimport { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ShowTime = _ref => {\n  let {\n    time\n  } = _ref;\n  const minute = Math.floor(time / 60);\n  const second = time % 60;\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"timer\",\n    children: [minute < 10 ? '0' + minute : minute, \" : \", second < 10 ? '0' + second : second]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ShowTime;\nconst modes = {\n  work: 0,\n  rest: 1,\n  setting: 2\n};\nexport default function App() {\n  _s();\n\n  // 3000s = 50mins for work, 600s = 10min for break\n  const [workTime, setWorkTime] = useState(3000);\n  const [restTime, setRestTime] = useState(600);\n  const [timer, setTimer] = useState(workTime);\n  const [mode, setMode] = useState(modes.work);\n  const [isBreak, setIsBreak] = useState(false);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer(t => t - 1);\n    }, 1000);\n    console.log(mode);\n    return () => clearInterval(interval);\n  }, []);\n\n  const workSection = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main workMain \" + (mode === modes.work ? 'show' : ''),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btnContainer\",\n      children: [/*#__PURE__*/_jsxDEV(MdRefresh, {\n        className: \"btn\",\n        onClick: () => {\n          mode == modes.work ? setTimer(workTime) : setTimer(restTime);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MdSettings, {\n        className: \"btn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ShowTime, {\n      time: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), isBreak ? /*#__PURE__*/_jsxDEV(MdWork, {\n      className: \"btn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 20\n    }, this) : /*#__PURE__*/_jsxDEV(AiTwotoneRest, {\n      className: \"btn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 48\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 7\n  }, this);\n\n  const settingSection = /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main settingMain \" + (mode === modes.setting ? 'show' : ''),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"btnContainer\",\n      children: /*#__PURE__*/_jsxDEV(MdRefresh, {\n        className: \"btn stBtn\",\n        onClick: () => {}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"textContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"textLine\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text\",\n          children: \"work:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          pattern: \"\\\\d*\",\n          maxLength: \"2\",\n          placeholder: workTime / 60,\n          className: \"inText text\",\n          style: null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text\",\n          children: \"mins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"textLine\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text\",\n          children: \"rest:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          pattern: \"\\\\d*\",\n          maxLength: \"2\",\n          placeholder: restTime / 60,\n          className: \"inText text\",\n          style: null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text\",\n          children: \"mins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MdClose, {\n      className: \"btn stBtn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(App, \"QICS2/lCoX2HOtwTutPsOxXD6eo=\");\n\n_c2 = App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShowTime\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/charlie/Desktop/pomo-widget/src/App.jsx"],"names":["MdRefresh","MdWork","MdSettings","MdClose","AiTwotoneRest","useState","useEffect","ShowTime","time","minute","Math","floor","second","modes","work","rest","setting","App","workTime","setWorkTime","restTime","setRestTime","timer","setTimer","mode","setMode","isBreak","setIsBreak","interval","setInterval","t","console","log","clearInterval","workSection","settingSection"],"mappings":"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","sourcesContent":["import { MdRefresh, MdWork, MdSettings, MdClose } from 'react-icons/md';\nimport { AiTwotoneRest } from 'react-icons/ai';\nimport { useState, useEffect } from 'react';\nimport './App.css';\n\nconst ShowTime = ( {time} ) => {\n  const minute = Math.floor(time / 60);\n  const second = time % 60;\n\n  return (\n    <span className=\"timer\">\n      {minute < 10 ? '0'+minute : minute} : {second < 10 ? '0'+second : second}\n    </span>\n  )\n}\n\nconst modes = {\n  work: 0,\n  rest: 1,\n  setting: 2\n}\n\nexport default function App() {\n  // 3000s = 50mins for work, 600s = 10min for break\n  const [ workTime, setWorkTime ] = useState(3000);\n  const [ restTime, setRestTime ] = useState(600);\n  const [ timer, setTimer ] = useState(workTime);\n  const [ mode, setMode ] = useState(modes.work);\n  const [ isBreak, setIsBreak ] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimer(t => t-1);\n    }, 1000);\n\n    console.log(mode)\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const workSection = (\n      <div className={\"main workMain \"+(mode===modes.work?'show':'')}>\n        <div className=\"btnContainer\">\n          <MdRefresh \n            className=\"btn\" \n            onClick={()=>{\n              mode == modes.work ? setTimer(workTime) : setTimer(restTime)\n            }}\n          />\n          <MdSettings \n            className=\"btn\"/>\n        </div>\n        <ShowTime time={timer} />\n        {isBreak ? <MdWork className=\"btn\"/> : <AiTwotoneRest className=\"btn\"/>}\n      </div>\n  )\n\n  const settingSection= (\n    <div className={\"main settingMain \"+(mode===modes.setting?'show':'')}>\n      <div className=\"btnContainer\">\n        <MdRefresh\n          className=\"btn stBtn\" \n          onClick={()=>{\n          }}\n        />\n      </div>\n      <div className=\"textContainer\">\n          <div className=\"textLine\">\n          <span className=\"text\">work:</span>\n          <input \n            type=\"text\" \n            pattern=\"\\d*\"\n            maxLength=\"2\"\n            placeholder={workTime/60}\n            className=\"inText text\"   \n            style={null}\n          />\n          <span className=\"text\">mins</span>\n        </div>\n        <div className=\"textLine\">\n          <span className=\"text\">rest:</span>\n          <input \n            type=\"text\" \n            pattern=\"\\d*\"\n            maxLength=\"2\"\n            placeholder={restTime/60}\n            className=\"inText text\"   \n            style={null}\n          />\n          <span className=\"text\">mins</span>\n        </div>\n      </div>\n      <MdClose className=\"btn stBtn\"/>\n    </div>\n  )\n\n  return (\n    <>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}